"""
–ú–µ–Ω–µ–¥–∂–µ—Ä ANFIS –º–æ–¥–µ–ª–µ–π
"""
import time
import numpy as np
from sklearn.metrics import (accuracy_score, roc_auc_score, precision_score, recall_score, f1_score,
                           mean_squared_error, mean_absolute_error, r2_score)
from xanfis import BioAnfisClassifier, BioAnfisRegressor

class ANFISManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ANFIS –º–æ–¥–µ–ª–µ–π"""

    def __init__(self, config):
        self.config = config
        self.model_config = config['model']
        self.task_type = config['dataset']['task_type']  # 'classification' –∏–ª–∏ 'regression'

    def create_model(self, verbose=True):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ANFIS"""
        base_params = {
            'num_rules': self.model_config['num_rules'],
            'mf_class': self.model_config['mf_class'],
            'optim': self.model_config['optim'],
            'optim_params': self.model_config['optim_params'],
            'reg_lambda': self.model_config['reg_lambda'],
            'seed': self.model_config['seed'],
            'verbose': verbose
        }

        if self.task_type == 'regression':
            return BioAnfisRegressor(**base_params)
        else:
            return BioAnfisClassifier(**base_params)

    def train_vanilla_model(self, X_train, y_train, X_test, y_test):
        """–û–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π ANFIS –º–æ–¥–µ–ª–∏"""
        task_name = "–†–µ–≥—Ä–µ—Å—Å–∏—è" if self.task_type == 'regression' else "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"
        print(f"üîµ –û–±—É—á–µ–Ω–∏–µ Vanilla ANFIS ({task_name})...")
        start_time = time.time()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = self.create_model(verbose=True)
        y_train_values = y_train.values if hasattr(y_train, 'values') else y_train
        model.fit(X_train, y_train_values)

        training_time = time.time() - start_time

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        y_pred = model.predict(X_test)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
        if isinstance(y_pred, np.ndarray) and y_pred.ndim > 1:
            y_pred = y_pred.flatten()

        if self.task_type == 'regression':

            y_prob_for_metrics = y_pred
        else:
            y_prob = model.predict_proba(X_test)
            # –î–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ—Ä–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ 1
            if len(y_prob.shape) > 1 and y_prob.shape[1] > 1:
                y_prob_for_metrics = y_prob[:, 1] if y_prob.shape[1] == 2 else y_prob.flatten()
            else:
                y_prob_for_metrics = y_prob.flatten()

        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics = self._calculate_metrics(y_test, y_pred, y_prob_for_metrics)

        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = self._extract_feature_importance(model, X_train.shape[1])

        results = {
            'model': model,
            'predictions': y_pred,
            'probabilities': y_prob_for_metrics,
            'metrics': metrics,
            'feature_importance': feature_importance,
            'training_time': training_time
        }

        self._print_results(results, f"Vanilla ANFIS ({task_name})")
        return results

    def _calculate_metrics(self, y_true, y_pred, y_prob):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        if self.task_type == 'regression':
            return {
                'rmse': np.sqrt(mean_squared_error(y_true, y_pred)),
                'mae': mean_absolute_error(y_true, y_pred),
                'r2': r2_score(y_true, y_pred)
            }
        else:
            return {
                'accuracy': accuracy_score(y_true, y_pred),
                'precision': precision_score(y_true, y_pred),
                'recall': recall_score(y_true, y_pred),
                'f1_score': f1_score(y_true, y_pred),
                'roc_auc': roc_auc_score(y_true, y_prob)
            }

    def _extract_feature_importance(self, model, n_features):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏"""
        try:
            coefficients = model.network.state_dict()['coeffs'].detach().cpu().numpy()
            return np.sum(np.abs(coefficients[:, :-1, 0]), axis=0)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return np.ones(n_features) / n_features

    def _print_results(self, results, model_name):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        metrics = results['metrics']
        print(f"\n‚úÖ {model_name} –æ–±—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        if self.task_type == 'regression':
            print(f"   üìä RMSE: {metrics['rmse']:.4f}")
            print(f"   üéØ MAE: {metrics['mae']:.4f}")
            print(f"   üìà R¬≤: {metrics['r2']:.4f}")
        else:
            print(f"   üìä Accuracy: {metrics['accuracy']:.4f}")
            print(f"   üéØ Precision: {metrics['precision']:.4f}")
            print(f"   üéØ Recall: {metrics['recall']:.4f}")
            print(f"   üéØ F1-Score: {metrics['f1_score']:.4f}")
            print(f"   üìà ROC AUC: {metrics['roc_auc']:.4f}")

        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {results['training_time']:.2f} —Å–µ–∫")
